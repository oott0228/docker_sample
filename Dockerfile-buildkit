# syntax = docker/dockerfile:experimental

# Node.jsダウンロード用ビルドステージ（元）
# FROM ruby:3.0.4 AS nodejs

# WORKDIR /tmp

# Node.jsのダウンロード（元）
# RUN curl -LO https://node.js.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz
# RUN tar xvf node-v12.14.1-linux-x64.tar.xz

# xz形式だとエラーとなったためgz形式に変更（これも後でコンパイルのところでエラーになる）
# RUN curl -LO https://node.js.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.gz
# RUN tar xvf node-v12.14.1-linux-x64.tar.gz
# RUN mv node-v12.14.1-linux-x64 node

# Node.jsダウンロード方法を簡略化してみる
FROM node:12.14.1 AS nodejs

# Railsプロジェクトインストール
FROM ruby:3.0.4

# node.jsをインストールしたイメージからnode.jsをコピーする（元）
# COPY --from=nodejs /tmp/node /opt/node
# ENV PATH /opt/node/bin:$PATH

# node.jsをインストールしたイメージからnode.jsをコピーする（簡略化した場合）
COPY --from=nodejs /usr/local/bin/node /usr/local/bin/node
COPY --from=nodejs /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/bin/node /usr/local/bin/nodejs


# アプリケーション起動用のユーザを追加
RUN useradd -m -u 1000 rails
RUN mkdir /app && chown rails /app
USER rails

# yarnのインストール（元）
# RUN curl -o- L https://yarnpkg.com/install.sh | bash
# ENV PATH /home/rails/.yarn/bin:/home/rails/.config/yarn/global/node_modules/.bin:$PATH

# nodejsのインストール方法を変えたらyarnインストールでエラーになったためこちらも変更
# yarnをインストールするために必要なパッケージをインストール
# 権限でエラーとなったために一時的にrootユーザーに切り替える
USER root
RUN apt-get update && apt-get install -y curl

# yarnのインストール（変更）
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
RUN apt-get update && apt-get install -y yarn

# ユーザーをrailsに戻す
USER rails

# ruby2.7以上でrails newをするとruby-2.6系で同梱されているbundlerとメジャーバージョンが異なるためbunddlerを実行できなくなる
# そのため、明示的にbundlerを最新にupdateする
RUN gem install bundler

WORKDIR /app

# Dockerのビルドステップキャッシュを利用するため、先にGemfileを転送し、bundle installを実行する
COPY --chown=rails Gemfile Gemfile.lock package.json yarn.lock /app/

RUN bundle config set app_config .bundle
RUN bundle config set path .cache/bundle
RUN --mount=type=cache,uid=1000,target=/app/.cache/bundle bundle install && \
  mkdir -p vendor && \
  cp -ar .cache/bundle vendor/bundle
RUN bundle config set path vendor/bundle

RUN --mount=type=cache,uid=1000,target=/app/.cache/node_modules yarn install --modules-folder .cache/node_modules && \
  cp -ar .cache/node_modules node_modules

COPY --chown=rails . /app

RUN --mount=type=cache,uid=1000,target=/app/tmp/cache bin/rails assets:precompile

USER root

# アプリケーションコードが空だとキャッシュファイルが存在せずエラーとなるため if文で存在チェックを行う
RUN if [ -d "/app/tmp/cache" ]; then rm -r /app/tmp/cache; fi

USER rails

VOLUME /app/public

# 実行時にコマンド指定がない場合に実行されるコマンド
CMD ["bin/rails", "s", "-b", "0.0.0.0"]


